# Extracting whycon coordinates through the python code shown by camera. 

# A Glimpse of PYTHON Code

#!/usr/bin/env python

import rospy
import roslib
import tf

from geometry_msgs.msg import PoseArray
from aruco_msgs.msg import MarkerArray

class Marker_detect():

	def __init__(self):
		rospy.init_node('marker_detection',anonymous=False) # initializing a ros node with name marker_detection

		self.whycon_marker = {}	# Declaring dictionaries
		self.aruco_marker = {}

		rospy.Subscriber('/whycon/poses',PoseArray,self.whycon_data)	# Subscribing to topic
		rospy.Subscriber('/aruco_marker_publisher/markers',MarkerArray,self.aruco_data)# Subscribing to topic
		


	# Callback for /whycon/poses
	def whycon_data(self,msg):
		#print msg.poses
		q=0
		for i in msg.poses:
			s=str(i)
			s=s.split('\n')
			self.whycon_marker[q]=[float(s[1][5:]),float(s[2][5:]),float(s[3][5:])]
			q+=1
			
	# Callback for /aruco_marker_publisher/markers
	def aruco_data(self,msg):
		w=0
		for i in msg.markers:
			t=str(i)
			t=t.split('\n')
			self.aruco_marker[w]=[float(t[14][9:]),float(t[15][9:]),float(t[16][9:]),float(t[17][9:])]	
			w+=1


		print "\n" 
                print "WhyCon_marker",self.whycon_marker
		print "ArUco_marker",self.aruco_marker




if __name__=="__main__":

	marker = Marker_detect()

	
	while not rospy.is_shutdown():
		rospy.spin()


############################################################################################################################

# Marker detect launch file

<launch>
	<!-- Arguments for WhyCon node -->
  <arg name="name" default="whycon"/>
  <arg name="targets" default="3"/>
  <arg name="outer_diameter" default=".55"/>
  <arg name="inner_diameter" default=".20"/>

  <!-- Arguments for ArUco node -->
  <arg name="markerSize"      default="0.15"/>    <!-- in m -->
  <arg name="side"             default="left"/>
  <arg name="ref_frame"       default=""/>  <!-- leave empty and the pose will be published wrt param parent_name -->

  <!-- Image_proc node for calibration of image to remove fish eye effect (required actually when we are using real camera) -->
  <group ns="visionSensor">
  	<node pkg="image_proc" type="image_proc" name="image_proc"/>
  </group>

  <!-- Running WhyCon node-->
  <node name="whycon" type="whycon" pkg="whycon" output="screen">

  	<!-- Setting the arguments recieved to the corresponding parameters -->
    <param name="targets" value="$(arg targets)"/>
    <param name="name" value="$(arg name)"/>
    <param name="outer_diameter" value="$(arg outer_diameter)"/>
    <param name="inner_diameter" value="$(arg inner_diameter)"/> 

    <!-- Remap the topics to the corresponding topics -->
    <remap from="/camera/camera_info" to="/visionSensor/camera_info"/>
    <remap from="/camera/image_rect_color" to="/visionSensor/image_rect"/> 

  </node>

  <!-- Running ArUco node -->
  <node pkg="aruco_ros" type="marker_publisher" name="aruco_marker_publisher" output ="screen">
  	<!-- Setting the arguments recieved to the corresponding parameters -->
  	<param name="image_is_rectified" value="True"/>
    <param name="marker_size"        value="$(arg markerSize)"/>
    <param name="reference_frame"    value="$(arg ref_frame)"/> 
    <param name="use_camera_info"    value="true"/> 

    <!-- Remap the topics to the corresponding topics -->
   	<remap from="/camera_info" to="/visionSensor/camera_info"/>
	    <remap from="/image" to="/visionSensor/image_rect"/> 
  </node>

  <!-- Running image_view node to display WhyCon output -->
  <node ns = "whycon_display" name="image_view" type="image_view" pkg="image_view" output="screen">
    <remap from="image" to="/whycon/image_out"/>
  </node>

  <!-- Running the image_view node to display ArUco marker output -->
  <node ns = "aruco" name="image_view" type="image_view" pkg="image_view" output="screen">
    <remap from="image" to="/aruco_marker_publisher/result"/>
  </node>

</launch>
  
